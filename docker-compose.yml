version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: food-discount-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: food_app
      POSTGRES_PASSWORD: ${DB_PASSWORD:-food_app_password_2025}
      POSTGRES_DB: food_discount_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - food-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U food_app"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: food-discount-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=food_discount_db
      - DB_USER=food_app
      - DB_PASSWORD=${DB_PASSWORD:-food_app_password_2025}
      - JWT_SECRET=${JWT_SECRET:-super_secret_jwt_key_change_in_production_12345}
      - JWT_EXPIRE=7d
      - MAX_FILE_SIZE=5242880
      - UPLOAD_PATH=./src/uploads
      - CLIENT_URL=https://spasiedu.sh3.su
      - ADMIN_EMAIL=admin@spasiedu.sh3.su
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
    volumes:
      - uploads_data:/app/src/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - food-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: food-discount-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - food-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3

networks:
  food-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
